"""
this file demonstrates several ways to obscure sensitive information (API keys, usernames, passwords, etc.) from
python source code.  this example uses a randomly generated key typically used for web apps but any hard coded
key will work as well
Remember to add the .env or other file containing any hard coded key definitions to the .gitignore file so your secret stuff
isn't uploaded to github.
"""

## -- generate key and define environment vars
echo "export SECRET_KEY='$(openssl rand -hex 40)'" > .env_key_file
source .env_key_file

## -- read key(s) from OS with python
from os import environ
try:
  SECRET_KEY = os.environ["SECRET_KEY"] 
except KeyError as e:
  raise RuntimError("Could not find SECRET_KEY in environment") from e

## -- or...
SECRET_KEY = os.environ.get('SECRET_KEY')
if not SECRET_KEY:
  raise RuntimError("Could not find SECRET_KEY in environment")

## -- alternate method: add the following to .bash_profile,
## -- run source .bash_profile,
## -- then read using os.environ.get
export SECRET_KEY="$(openssl rand -hex 40)"

## -- alternate method: using dotenv (pip install python-dotenv)
## -- create a file named .env with key(s) to load
## -- add .env to .gitignore to prevent .env from being commited to github
from dotenv import load_dotenv
import os

load_dotenv()

SECRET_KEY = os.getenv('SECRET_KEY')
